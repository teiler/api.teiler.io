/**
 * MIT License
 *
 * Copyright (c) 2017 L. Röllin, P. Bächli, K. Thurairatnam & D. Thoma
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
{
	"variables": [],
	"info": {
		"name": "Tylr",
		"_postman_id": "d935c4c5-5f9a-b4c9-b90a-427eae2af07c",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Create new group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Group name is correct\"] = jsonData.name === \"Hello World\"",
							"tests[\"Contains group ID\"] = 'id' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"group\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Hello World\" \n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Get group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Group name is correct\"] = jsonData.name === \"Hello World\"",
							"tests[\"Contains group ID\"] = 'id' in jsonData;",
							"tests[\"Contains people\"] = 'people' in jsonData;",
							"tests[\"Contains currency\"] = 'currency' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Create first person",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Person name is correct\"] = jsonData.name === \"Heiri Müller\"",
							"tests[\"Contains person id\"] = 'id' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"person1Id\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/people",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Heiri Müller\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Create second Person",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Person name is correct\"] = jsonData.name === \"Hans Müller\"",
							"tests[\"Contains person id\"] = 'id' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"person2Id\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/people",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Hans Müller\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Create new expense",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Expense title is correct\"] = jsonData.title === \"Getrocknete Bananen\";",
							"tests[\"Expense amount is correct\"] = jsonData.amount == \"1000\";",
							"tests[\"Payer id is correct\"] = jsonData.payer.id == globals.person1Id;",
							"tests[\"Number of profiteers is correct\"] = jsonData.profiteers.length == 2;",
							"tests[\"Profiteer ids are correct\"] = jsonData.profiteers[0].person.id == globals.person1Id && jsonData.profiteers[1].person.id == globals.person2Id;",
							"tests[\"Profiteer factors are correct\"] = jsonData.profiteers[0].share == \"600\" && jsonData.profiteers[1].share == \"400\";",
							"tests[\"Contains expense id\"] = 'id' in jsonData;",
							"tests[\"Contains payer\"] = 'payer' in jsonData;",
							"tests[\"Contains profiteers\"] = 'profiteers' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"expenseId\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Getrocknete Bananen\",\r\n    \"amount\": \"1000\",\r\n    \"payer\": {\r\n        \"id\": {{person1Id}}\r\n    }, \r\n    \"profiteers\": [\r\n        {\r\n            \"person\": {\r\n                \"id\": {{person1Id}}\r\n            }, \r\n            \"share\": \"600\"\r\n        },\r\n        {\r\n            \"person\": {\r\n                \"id\": {{person2Id}}\r\n            }, \r\n            \"share\": \"400\"\r\n        }\r\n    ]\r\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Show expenses",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Number of expenses is correct\"] = jsonData.length == 1;",
							"tests[\"Number of profiteers is correct\"] = jsonData[0].profiteers.length == 2;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses?limit=5",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Show expense",
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses/{{expenseId}}",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Edit expense",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Expense title is correct\"] = jsonData.title === \"Luftgetrocknete Bananen\";",
							"tests[\"Expense amount is correct\"] = jsonData.amount == \"10000\";",
							"tests[\"Payer id is correct\"] = jsonData.payer.id == globals.person2Id;",
							"tests[\"Number of profiteers is correct\"] = jsonData.profiteers.length == 2;",
							"tests[\"Profiteer ids are correct\"] = jsonData.profiteers[0].person.id == globals.person1Id && jsonData.profiteers[1].person.id == globals.person2Id;",
							"tests[\"Profiteer factors are correct\"] = jsonData.profiteers[0].share == \"7000\" && jsonData.profiteers[1].share == \"3000\";",
							"tests[\"Contains expense id\"] = 'id' in jsonData;",
							"tests[\"Contains payer\"] = 'payer' in jsonData;",
							"tests[\"Contains profiteers\"] = 'profiteers' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"expenseId\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses/{{expenseId}}",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Luftgetrocknete Bananen\",\n    \"amount\": \"10000\",\n    \"payer\": {\n        \"id\": {{person2Id}}\n    }, \n    \"profiteers\": [\n        {\n            \"person\": {\n                \"id\": {{person1Id}}\n            }, \n            \"share\": \"7000\"\n        },\n        {\n            \"person\": {\n                \"id\": {{person2Id}}\n            }, \n            \"share\": \"3000\"\n        }\n    ]\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Edit expense - Remove Profiteer",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Expense title is correct\"] = jsonData.title === \"Luftgetrocknete Bananen\";",
							"tests[\"Expense amount is correct\"] = jsonData.amount == \"10000\";",
							"tests[\"Payer id is correct\"] = jsonData.payer.id == globals.person1Id;",
							"tests[\"Number of profiteers is correct\"] = jsonData.profiteers.length == 1;",
							"tests[\"Profiteer ids are correct\"] = jsonData.profiteers[0].person.id == globals.person1Id;",
							"tests[\"Profiteer factors are correct\"] = jsonData.profiteers[0].share == \"10000\";",
							"tests[\"Contains expense id\"] = 'id' in jsonData;",
							"tests[\"Contains payer\"] = 'payer' in jsonData;",
							"tests[\"Contains profiteers\"] = 'profiteers' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"expenseId\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses/{{expenseId}}",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Luftgetrocknete Bananen\",\r\n    \"amount\": \"10000\",\r\n    \"payer\": {\r\n        \"id\": {{person1Id}}\r\n    }, \r\n    \"profiteers\": [\r\n        {\r\n            \"person\": {\r\n                \"id\": {{person1Id}}\r\n            }, \r\n            \"share\": \"10000\"\r\n        }\r\n    ]\r\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Edit expense - Add Profiteer",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Expense title is correct\"] = jsonData.title === \"Luftgetrocknete Bananen\";",
							"tests[\"Expense amount is correct\"] = jsonData.amount == \"10000\";",
							"tests[\"Payer id is correct\"] = jsonData.payer.id == globals.person1Id;",
							"tests[\"Number of profiteers is correct\"] = jsonData.profiteers.length == 2;",
							"tests[\"Profiteer ids are correct\"] = jsonData.profiteers[0].person.id == globals.person1Id && jsonData.profiteers[1].person.id == globals.person2Id;",
							"tests[\"Profiteer factors are correct\"] = jsonData.profiteers[0].share == \"5000\" && jsonData.profiteers[1].share == \"5000\";",
							"tests[\"Contains expense id\"] = 'id' in jsonData;",
							"tests[\"Contains payer\"] = 'payer' in jsonData;",
							"tests[\"Contains profiteers\"] = 'profiteers' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"expenseId\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses/{{expenseId}}",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Luftgetrocknete Bananen\",\r\n    \"amount\": \"10000\",\r\n    \"payer\": {\r\n        \"id\": {{person1Id}}\r\n    }, \r\n    \"profiteers\": [\r\n        {\r\n            \"person\": {\r\n                \"id\": {{person1Id}}\r\n            }, \r\n            \"share\": \"5000\"\r\n        },\r\n        {\r\n            \"person\": {\r\n                \"id\": {{person2Id}}\r\n            }, \r\n            \"share\": \"5000\"\r\n        }\r\n    ]\r\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete expense",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses/{{expenseId}}",
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Create new compensation",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Compensation amount is correct\"] = jsonData.amount == \"1000\";",
							"tests[\"Payer id is correct\"] = jsonData.payer.id == globals.person1Id;",
							"tests[\"Profiteer id is correct\"] = jsonData.profiteer.id == globals.person2Id;",
							"tests[\"Contains compensation id\"] = 'id' in jsonData;",
							"tests[\"Contains payer\"] = 'payer' in jsonData;",
							"tests[\"Contains profiteer\"] = 'profiteer' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"compensationId\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/compensations",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": \"1000\",\r\n    \"payer\": {\r\n        \"id\": {{person1Id}}\r\n    }, \r\n    \"profiteer\": {\r\n    \t\"id\": {{person2Id}}\r\n    }\r\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Show compensations",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Number of compensations is correct\"] = jsonData.length == 1;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/compensations?limit=5",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Show compensation",
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/compensations/{{compensationId}}",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Edit compensation",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Compensation amount is correct\"] = jsonData.amount == \"5000\";",
							"tests[\"Payer id is correct\"] = jsonData.payer.id == globals.person2Id;",
							"tests[\"Profiteer id is correct\"] = jsonData.profiteer.id == globals.person1Id",
							"tests[\"Contains compensation id\"] = 'id' in jsonData;",
							"tests[\"Contains payer\"] = 'payer' in jsonData;",
							"tests[\"Contains profiteer\"] = 'profiteer' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/compensations/{{compensationId}}",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 5000,\n    \"payer\": {\n            \"id\": {{person2Id}}\n    }, \n    \"profiteer\": {\n        \"id\": {{person1Id}}\n    }\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete compensation",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/compensations/{{compensationId}}",
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Edit person",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Person name is correct\"] = jsonData.name === \"Hansheiri Müller\"",
							"tests[\"Contains person id\"] = 'id' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/people/{{person1Id}}",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Hansheiri Müller\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Show people",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"First person is still there and changed\"] = jsonData[0].name === \"Hansheiri Müller\"",
							"tests[\"Second person is still there\"] = jsonData[1].name === \"Hans Müller\"",
							"tests[\"Contains update time\"] = 'update-time' in jsonData[0];",
							"tests[\"Contains create time\"] = 'create-time' in jsonData[0];"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/people?limit=5&active=false",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete person",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/people/{{person1Id}}",
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Edit group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Group name is correct\"] = jsonData.name === \"Hallo Welt\"",
							"tests[\"Group currency\"] = jsonData.currency === \"eur\"",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Hallo Welt\",\n    \"currency\": \"eur\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete a group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}",
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		}
	]
}