{
	"variables": [],
	"info": {
		"name": "Tylr",
		"_postman_id": "9a03cee4-82ce-e7a1-8546-28d7b0485314",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Create new group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Group name is correct\"] = jsonData.name === \"Hello World\"",
							"tests[\"Contains group ID\"] = 'id' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"group\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Hello World\" \n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Get group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Group name is correct\"] = jsonData.name === \"Hello World\"",
							"tests[\"Contains group ID\"] = 'id' in jsonData;",
							"tests[\"Contains people\"] = 'people' in jsonData;",
							"tests[\"Contains currency\"] = 'currency' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Create first person",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Person name is correct\"] = jsonData.name === \"Heiri Müller\"",
							"tests[\"Contains person id\"] = 'id' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"person1Id\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/people",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Heiri Müller\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Create second Person",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Person name is correct\"] = jsonData.name === \"Hans Müller\"",
							"tests[\"Contains person id\"] = 'id' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"person2Id\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/people",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Hans Müller\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Create new expense",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Expense title is correct\"] = jsonData.title === \"Getrocknete Bananen\";",
							"tests[\"Expense amount is correct\"] = jsonData.amount == \"1000\"",
							"tests[\"Payer id is correct\"] = jsonData.payer.id == globals.person1Id;",
							"tests[\"Number of profiteers is correct\"] = jsonData.profiteers.length == 2;",
							"tests[\"Profiteer ids are correct\"] = jsonData.profiteers[0].profiteer.id == globals.person1Id && jsonData.profiteers[1].profiteer.id == globals.person2Id;",
							"tests[\"Profiteer factors are correct\"] = jsonData.profiteers[0].factor == \"0.6\" && jsonData.profiteers[1].factor == \"0.4\";",
							"tests[\"Contains expense id\"] = 'id' in jsonData;",
							"tests[\"Contains payer\"] = 'payer' in jsonData;",
							"tests[\"Contains profiteers\"] = 'profiteers' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"expenseId\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Getrocknete Bananen\",\r\n    \"amount\": \"1000\",\r\n    \"payer\": {\r\n        \"id\": {{person1Id}},\r\n        \"name\": \"\"\r\n    }, \r\n    \"profiteers\": [\r\n        {\r\n            \"profiteer\": {\r\n                \"id\": {{person1Id}},\r\n        \t\t\"name\": \"\"\r\n            }, \r\n            \"factor\": \"0.6\"\r\n        },\r\n        {\r\n            \"profiteer\": {\r\n                \"id\": {{person2Id}},\r\n        \t\t\"name\": \"\"\r\n            }, \r\n            \"factor\": \"0.4\"\r\n        }\r\n    ]\r\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Show expenses",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Number of expenses is correct\"] = jsonData.length == 1;",
							"tests[\"Number of profiteers is correct\"] = jsonData[0].profiteers.length == 2;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses?limit=5",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Show expense",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"First person is still there and changed\"] = jsonData[0].name === \"Hansheiri Müller\"",
							"tests[\"Second person is still there\"] = jsonData[1].name === \"Hans Müller\"",
							"tests[\"Contains update time\"] = 'update-time' in jsonData[0];",
							"tests[\"Contains create time\"] = 'create-time' in jsonData[0];"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses/{{expenseId}}",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Edit expense",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Expense title is correct\"] = jsonData.title === \"Luftgetrocknete Bananen\";",
							"tests[\"Expense amount is correct\"] = jsonData.amount == \"950\"",
							"tests[\"Payer id is correct\"] = jsonData.payer.id == globals.person1Id;",
							"tests[\"Number of profiteers is correct\"] = jsonData.profiteers.length == 2;",
							"tests[\"Profiteer ids are correct\"] = jsonData.profiteers[0].profiteer.id == globals.person1Id && jsonData.profiteers[1].profiteer.id == globals.person2Id;",
							"tests[\"Profiteer factors are correct\"] = jsonData.profiteers[0].factor == \"0.7\" && jsonData.profiteers[1].factor == \"0.3\";",
							"tests[\"Contains expense id\"] = 'id' in jsonData;",
							"tests[\"Contains payer\"] = 'payer' in jsonData;",
							"tests[\"Contains profiteers\"] = 'profiteers' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;",
							"",
							"postman.setGlobalVariable(\"expenseId\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses/{{expenseId}}",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Luftgetrocknete Bananen\",\r\n    \"amount\": \"950\",\r\n    \"payer\": {\r\n        \"id\": {{person1Id}},\r\n        \"name\": \"\"\r\n    }, \r\n    \"profiteers\": [\r\n        {\r\n            \"profiteer\": {\r\n                \"id\": {{person1Id}},\r\n        \t\t\"name\": \"\"\r\n            }, \r\n            \"factor\": \"0.7\"\r\n        },\r\n        {\r\n            \"profiteer\": {\r\n                \"id\": {{person2Id}},\r\n        \t\t\"name\": \"\"\r\n            }, \r\n            \"factor\": \"0.3\"\r\n        }\r\n    ]\r\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete expense",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/expenses/{{expenseId}}",
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Edit person",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Person name is correct\"] = jsonData.name === \"Hansheiri Müller\"",
							"tests[\"Contains person id\"] = 'id' in jsonData;",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/people/{{person1Id}}",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Hansheiri Müller\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Show people",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"First person is still there and changed\"] = jsonData[0].name === \"Hansheiri Müller\"",
							"tests[\"Second person is still there\"] = jsonData[1].name === \"Hans Müller\"",
							"tests[\"Contains update time\"] = 'update-time' in jsonData[0];",
							"tests[\"Contains create time\"] = 'create-time' in jsonData[0];"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/people?limit=5",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete person",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}/people/{{person1Id}}",
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Edit group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Group name is correct\"] = jsonData.name === \"Hallo Welt\"",
							"tests[\"Group currency\"] = jsonData.currency === \"eur\"",
							"tests[\"Contains update time\"] = 'update-time' in jsonData;",
							"tests[\"Contains create time\"] = 'create-time' in jsonData;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Hallo Welt\",\n    \"currency\": \"eur\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Delete a group",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/v1/groups/{{group}}",
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		}
	]
}